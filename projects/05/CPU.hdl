// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // If C-instruction (opcode 1)
    //
    // a = instruction[12]
    // comp = instruction[6..11]
    // dest = instruction[3..5]
    // jmp = instruction[0..2]
    
    // MUX next instruction from instruction/ALU output
    //
    // If A-instruction (opcode 0):
    //	use instruction
    // Else: 
    // 	use ALUout
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain); 
    
    // A register loaded with muxed instruction/ALUoutput :
    // 
    // If A-instruction (opcode 0):
    //	Yes
    // Else if C-instruction (opcode 1): 
    // 	when last destination bit (instruction[5]) is set
    Not(in=instruction[15], out=opcodeA)
    And(a=instruction[15], b=instruction[5], out= cloadA);
    Or(a=opcodeA, b=cloadA, out= loadA);
    Register(in=Ain, load=loadA, out=Aout);

    // D register
    // Stores ALU output for C-instruction when 2nd destination bit is set
    And(a=instruction[15], b=instruction[4], out= loadD);
    Register(in=ALUout, load=loadD, out=Dout); 

    // MUX A-register and M-register (input) if a bit set for C-instruction
    Mux16(a=Aout, b=inM, sel=instruction[12], out=Muxout); 
    
    // ALU
    //
    // comp bits (instruction[6..11]) from C-instruction serve as control bits for ALU 
    ALU(x=Dout, y=Muxout, zx=instruction[6] , nx=instruction[7] , zy=instruction[8] , ny=instruction[9] , f=instruction[10] , no=instruction[11] , out=ALUout, zr=zr, ng=ng);

    // Write ALU o/p to M when C-instruction and lowest destination bit set
    Or(a=instruction[15], b=instruction[3], out=writeM);

    // Program counter
    //
    // If no jump (instruction[0..2] = 0) then increment
    Nor(a=instruction[0],b=instruction[1],out=intnojmp)
    Nor(a=intnojmp,b=instruction[2],out=nojmp)
    //
    // If goto/unconditional jump (instruction[0..2] = 1) then load instruction
    And(a=instruction[0],b=instruction[1],out=intgoto)
    And(a=intgoto,b=instruction[2],out=goto)
    //
    // If conditional goto check zr and ng
    // If true PC=A else PC++
    // get loadPC and incPC from here
    //
    PC(in=Aout, load=loadPC ,inc=incPC ,reset=reset ,out=pc); 
    
    
    Or16(a= Aout, b= Aout, out=addressM); // address buffer out


    
}
